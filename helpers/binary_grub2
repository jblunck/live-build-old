#!/bin/sh

# lh_binary_grub2(1) - installs grub2 into binary
# Copyright (C) 2006-2010 Daniel Baumann <daniel@debian.org>
#
# live-helper comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
# This is free software, and you are welcome to redistribute it
# under certain conditions; see COPYING for details.

Binary_grub ()
{
if [ "${LH_BOOTLOADER}" != "grub2" ]
then
	return
fi

Echo_message "Begin installing grub2..."

# Requiring stage file
Require_stagefile .stage/config .stage/bootstrap

# Checking stage file
Check_stagefile .stage/binary_grub

# Checking grub2 templates
Check_templates grub2

# Check architecture
Check_architecture amd64 i386
Check_crossarchitecture

# Checking depends
Check_package chroot/usr/bin/grub-mkimage grub-pc

# Restoring cache
Restore_cache cache/packages_binary

# Installing depends
Install_package

case "${LH_INITRAMFS}" in
	casper)
		INITFS="casper"
		;;

	live-initramfs)
		INITFS="live"
		;;
esac

# Setting destination directory
case "${LH_BINARY_IMAGES}" in
	iso*|tar)
		case "${LH_INITRAMFS}" in
			casper)
				DESTDIR_LIVE="binary/casper"
				;;

			live-initramfs)
				DESTDIR_LIVE="binary/live"
				;;
		esac

		DESTDIR_INSTALL="binary/install"
		;;

	usb*|net)
		Echo_warning "Bootloader in this image type not yet supported by live-helper."
		Echo_warning "This would produce a not bootable image, aborting (FIXME)."
		exit 1
	;;
esac

Check_multiarchitecture

# Creating directory
mkdir -p "${DESTDIR_LIVE}"

# Setting boot parameters

case "${LH_ENCRYPTION}" in
	""|false)
		;;
	*)
		LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} encryption=${LH_ENCRYPTION}"
esac

if [ -n "${LH_USERNAME}" ]
then
	case "${LH_INITRAMFS}" in
		casper)
			LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} username=${LH_USERNAME}"
			;;

		live-initramfs)
			if [ "${LH_USERNAME}" != "user" ]
			then
				LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} username=${LH_USERNAME}"
			fi
			;;
	esac
fi

if [ -n "${LH_HOSTNAME}" ]
then
	case "${LH_INITRAMFS}" in
		casper)
			LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} hostname=${LH_HOSTNAME}"
			;;

		live-initramfs)
			if [ "${LH_HOSTNAME}" != "debian" ]
			then
				LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} hostname=${LH_HOSTNAME}"
			fi
			;;
	esac
fi

if [ "${LH_UNION_FILESYSTEM}" != "aufs" ]
then
	LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} union=${LH_UNION_FILESYSTEM}"
fi

if [ -n "${LH_NET_COW_PATH}" ]
then
	Echo_error "Net cow not yet supported on grub"
	exit 1
fi

if [ "${LH_EXPOSED_ROOT}" != "false" ]
then
	LH_BOOTAPPEND_LIVE="${LH_BOOTAPPEND_LIVE} exposedroot"
fi

LH_BOOTAPPEND_LIVE="$(echo ${LH_BOOTAPPEND_LIVE} | sed -e 's|  ||')"

# Parameters are listed at: linux/Documentation/kernel-parameters.txt
FAILSAFE="noapic noapm nodma nomce nolapic nosmp vga=normal"

# Assembling kernel configuration

# Default entries
DEFAULT_FLAVOUR="$(echo ${LH_LINUX_FLAVOURS} | awk '{ print $1 }')"
DEFAULT_KERNEL="$(basename chroot/boot/vmlinuz-*${DEFAULT_FLAVOUR})"
DEFAULT_INITRD="initrd.img-$(echo ${DEFAULT_KERNEL} | sed -e 's|vmlinuz-||')"

Grub_live_entry "live" "$(basename ${DESTDIR_LIVE})/${DEFAULT_KERNEL}" "$(basename ${DESTDIR_LIVE})/${DEFAULT_INITRD}"
Grub_live_entry "live (fail-safe mode)" "$(basename ${DESTDIR_LIVE})/${DEFAULT_KERNEL}" "$(basename ${DESTDIR_LIVE})/${DEFAULT_INITRD}" "${FAILSAFE}"

for KERNEL in chroot/boot/vmlinuz-*
do
	VERSION="$(basename ${KERNEL} | sed -e 's|vmlinuz-||')"

	Grub_live_entry "live, kernel ${VERSION}" "$(basename ${DESTDIR_LIVE})/$(basename ${KERNEL})" "$(basename ${DESTDIR_LIVE})/initrd.img-${VERSION}"
	Grub_live_entry "live, kernel ${VERSION} (fail-safe mode)" "$(basename ${DESTDIR_LIVE})/$(basename ${KERNEL})" "$(basename ${DESTDIR_LIVE})/initrd.img-${VERSION}" "${FAILSAFE}"
done

LINUX_LIVE="$(/bin/echo ${LINUX_LIVE} | sed -e 's|binary||g' -e 's|//|/|g')"

# Assembling debian-installer configuration
if [ "${LH_DEBIAN_INSTALLER}" != "false" ]
then
	LINUX_LIVE="#\t \"Live\"\n${LINUX_LIVE}"
	LINUX_INSTALL="#\t \"Installer\"\n"

	VMLINUZ_DI="install/vmlinuz"
	INITRD_DI="install/initrd.gz"
	APPEND_DI="vga=normal"

	VMLINUZ_GI="install/gtk/vmlinuz"
	INITRD_GI="install/gtk/initrd.gz"
	APPEND_GI="video=vesa:ywrap,mtrr vga=788"

	Grub_install_entry "install" "${VMLINUZ_DI}" "${INITRD_DI}" "${APPEND_DI}"
	Grub_install_entry "installgui" "${VMLINUZ_GI}" "${INITRD_GI}" "${APPEND_GI}"
	Grub_install_entry "expert" "${VMLINUZ_DI}" "${INITRD_DI}" "priority=low ${APPEND_DI}"
	Grub_install_entry "expertgui" "${VMLINUZ_GI}" "${INITRD_GI}" "priority=low ${APPEND_GI}"
	Grub_install_entry "rescue" "${VMLINUZ_DI}" "${INITRD_DI}" "rescue/enable=true ${APPEND_DI}"
	Grub_install_entry "rescuegui" "${VMLINUZ_GI}" "${INITRD_GI}" "rescue/enable=true ${APPEND_GI}"
	Grub_install_entry "auto" "${VMLINUZ_DI}" "${INITRD_DI}" "auto=true priority=critical ${APPEND_DI}"
	Grub_install_entry "autogui" "${VMLINUZ_GI}" "${INITRD_GI}" "auto=true priority=critical ${APPEND_GI}"
fi

LINUX_INSTALL="$(/bin/echo ${LINUX_INSTALL} | sed -e 's|binary||g' -e 's|//|/|g')"

# Assembling memtest configuration
if [ -f "${DESTDIR_LIVE}"/memtest ]
then
	MEMTEST="#\t \"Other\"\n"
	MEMTEST="${MEMTEST}\nmenuentry\t\"${LH_MEMTEST}\" {\nlinux16\t$(basename ${DESTDIR_LIVE})/memtest\n}"
	MEMTEST="$(/bin/echo ${MEMTEST} | sed -e 's|//|/|g')"
fi

# Copying templates
mkdir -p binary/boot/grub
cp -r "${TEMPLATES}"/* binary/boot/grub

case ${LH_BINARY_IMAGES} in
	iso*)
		FILES="chroot/usr/lib/grub/i386-pc/*.mod chroot/usr/lib/grub/i386-pc/*.lst chroot/usr/lib/grub/i386-pc/efiemu??.o chroot/usr/share/grub/*.pf2"
		;;

	usb*|tar)
		FILES="chroot/usr/lib/grub/i386-pc/*"
		;;
esac

if [ "${LH_CHROOT_BUILD}" = "false" ]
then
	FILES="$(echo ${FILES} | sed -e 's|chroot||g')"
fi

# Copying grub
cp ${FILES} binary/boot/grub

# Copying local configuration file
if [ -f config/binary_grub/grub.cfg ]
then
	cp config/binary_grub/grub.cfg binary/boot/grub/grub.cfg
fi

# Copying splash screen
if [ -f config/binary_grub/splash.tga ]
then
	LH_GRUB_SPLASH="config/binary_grub/splash.tga"
fi

if [ -n "${LH_GRUB_SPLASH}" ]
then
	if [ "${LH_GRUB_SPLASH}" = "none" ]
	then
		# Removing splash file
		rm -f binary/boot/grub/splash.tga

		# Removing splash entry
		sed -i -e "s|background_image.*||" binary/boot/grub/grub.cfg
	else
		# Overwriting splash file
		cp -f "${LH_GRUB_SPLASH}" binary/boot/grub
		sed -i -e "s|background_image .*.tga|background_image \$\(root\)/boot/grub/$(basename ${LH_GRUB_SPLASH})|" binary/boot/grub/grub.cfg
	fi
fi

sed -i -e "s|LINUX_LIVE|${LINUX_LIVE}|" -e "s|LINUX_INSTALL|${LINUX_INSTALL}|" -e "s|MEMTEST|${MEMTEST}|" binary/boot/grub/grub.cfg
sed -i -e "s|LH_BOOTAPPEND_INSTALL|${LH_BOOTAPPEND_INSTALL}|" -e "s|LH_BOOTAPPEND_LIVE|${LH_BOOTAPPEND_LIVE}|" binary/boot/grub/grub.cfg

sed -i -e 's|\ $||g' binary/boot/grub/grub.cfg

# Saving cache
Save_cache cache/packages_binary

# Removing depends
Remove_package

# Creating stage file
Create_stagefile .stage/binary_grub
}

Grub_live_entry ()
{
	LABEL="${1}"
	KERNEL="${2}"
	INITRD="${3}"
	APPEND="${4}"

	LINUX_LIVE="${LINUX_LIVE}\nmenuentry \"Debian GNU/Linux - ${LABEL}\" {"
	LINUX_LIVE="${LINUX_LIVE}\nlinux\t\t/${KERNEL} boot=${INITFS} LH_BOOTAPPEND_LIVE ${APPEND}"
	LINUX_LIVE="${LINUX_LIVE}\ninitrd\t\t/${INITRD}"
	LINUX_LIVE="${LINUX_LIVE}\n}"
}

Grub_install_entry ()
{
	LABEL="${1}"
	KERNEL="${2}"
	INITRD="${3}"
	APPEND="${4}"

	if [ "${LABEL}" != "rescue" ] && [ "${LABEL}" != "rescuegui" ]
	then
		APPEND="${APPEND} quiet"
	fi

	LINUX_INSTALL="${LINUX_INSTALL}\nmenuentry \"Debian GNU/Linux - ${LABEL}\" {"
	LINUX_INSTALL="${LINUX_INSTALL}\nlinux\t\t/${KERNEL} ${APPEND} LH_BOOTAPPEND_INSTALL"
	LINUX_INSTALL="${LINUX_INSTALL}\ninitrd\t\t/${INITRD}"
	LINUX_INSTALL="${LINUX_INSTALL}\n}"
}
