#!/bin/sh

# lh_binary_iso(1) - build iso binary image
# Copyright (C) 2006-2010 Daniel Baumann <daniel@debian.org>
#
# live-helper comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
# This is free software, and you are welcome to redistribute it
# under certain conditions; see COPYING for details.

Binary_iso ()
{
case "${LH_BINARY_IMAGES}" in
	iso)
		IMAGE="binary.iso"
		;;

	iso-hybrid)
		IMAGE="binary-hybrid.iso"
		;;

	*)
		return
		;;
esac

Echo_message "Begin building binary iso image..."

# Requiring stage file
Require_stagefile .stage/config .stage/bootstrap

# Checking stage file
Check_stagefile .stage/binary_iso

# Checking depends
Check_package chroot/usr/bin/genisoimage genisoimage

if [ "${LH_BINARY_IMAGES}" = "iso-hybrid" ]
then
	Check_package chroot/usr/bin/isohybrid syslinux-common
fi

# Restoring cache
Restore_cache cache/packages_binary

# Installing depends
Install_package

# Remove old iso image
if [ -f ${IMAGE} ]
then
	rm -f ${IMAGE}
fi

# Handle genisoimage generic options
GENISOIMAGE_OPTIONS="-J -l -cache-inodes -allow-multidot"

# Handle genisoimage live-helper specific options
if [ "${_QUIET}" = "true" ]
then
	GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -quiet"
fi

if [ "${_VERBOSE}" = "true" ]
then
	GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -v"
fi

if [ -n "${LH_ISO_APPLICATION}" ] && [ "${LH_ISO_APPLICATION}" != "none" ]
then
	GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -A \"${LH_ISO_APPLICATION}\""
fi

if [ -n "${LH_ISO_PREPARER}" ] && [ "${LH_ISO_PREPARER}" != "none" ]
then
	GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -p \"${LH_ISO_PREPARER}\""
fi

if [ -n "${LH_ISO_PUBLISHER}" ] && [ "${LH_ISO_PUBLISHER}" != "none" ]
then
	GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -publisher \"${LH_ISO_PUBLISHER}\""
fi

if [ -n "${LH_ISO_VOLUME}" ] && [ "${LH_ISO_VOLUME}" != "none" ]
then
	GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -V \"${LH_ISO_VOLUME}\""
fi

# Handle genisoimage architecture specific options
case "${LH_BOOTLOADER}" in
	grub)
		GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -no-emul-boot -boot-load-size 4 -boot-info-table"
		GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -r -b boot/grub/stage2_eltorito"
		GENISOIMAGE_EXCLUDE="boot/grub/stage2_eltorito"
		;;

	grub2)
		GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -no-emul-boot -boot-load-size 4 -boot-info-table"
		GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -r -b boot/grub/grub_eltorito -J"
		GENISOIMAGE_EXCLUDE="boot/grub/grub_eltorito"
		;;

	silo)
		GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -r -G boot/isofs.b -B ..."
		GENISOIMAGE_EXCLUDE="boot/isofs.b"
		;;

	syslinux)
		GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -no-emul-boot -boot-load-size 4 -boot-info-table"
		GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -r -b isolinux/isolinux.bin -c isolinux/boot.cat"
		GENISOIMAGE_EXCLUDE="isolinux/isolinux.bin"
		;;

	yaboot)
		GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -r --iso-level 2 --netatalk -hfs -probe -map"
		GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} binary/yaboot/hfs.map --chrp-boot -part -no-desktop"
		GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -hfs-bless binary/yaboot -hfs-volid Debian/Live_powerpc"
		GENISOIMAGE_EXCLUDE="yaboot/hfs.map"
		;;

	*)
		Echo_warning "Bootloader on your architecture not yet supported by live-helper."
		Echo_warning "This will produce a most likely not bootable image (Continuing in 5 seconds)."
		sleep 5
		;;
esac

if In_list "stripped minimal" "${LH_PACKAGES_LISTS}"
then
	if [ "${LH_DEBIAN_INSTALLER}" != "live" ]
	then
		GENISOIMAGE_OPTIONS="${GENISOIMAGE_OPTIONS} -m ${GENISOIMAGE_EXCLUDE}"
	fi
fi

if [ "${LH_BOOTLOADER}" = "grub2" ]
then

cat > binary.sh << EOF
#!/bin/sh

input_dir=/usr/lib/grub/i386-pc

# build core.img
core_img=\$(mktemp)
grub-mkimage -d \${input_dir} -o \${core_img} biosdisk iso9660

# build grub_eltorito image
cat \${input_dir}/cdboot.img \${core_img} > binary/boot/grub/grub_eltorito

rm -f \${core_img}

for file in \${input_dir}/*.mod \${input_dir}/efiemu??.o \
	\${input_dir}/command.lst \${input_dir}/moddep.lst \${input_dir}/fs.lst \
	\${input_dir}/handler.lst \${input_dir}/parttool.lst
do
	if test -f "\$file"
	then
		cp -f "\$file" binary/boot/grub
	fi
done
EOF

else
	echo "#!/bin/sh" > binary.sh
fi

cat >> binary.sh << EOF

genisoimage ${GENISOIMAGE_OPTIONS} -o ${IMAGE} binary
EOF

if [ "${LH_BINARY_IMAGES}" = "iso-hybrid" ]
then

cat >> binary.sh << EOF

isohybrid ${IMAGE}
EOF

fi

case "${LH_CHROOT_BUILD}" in
	true)
		# Moving image
		mv binary.sh chroot
		mv binary chroot

		Chroot_target chroot "sh binary.sh"

		# Move image
		mv chroot/binary chroot/${IMAGE} ./
		rm -f chroot/binary.sh
		;;

	false)
		sh binary.sh
		rm -f binary.sh
		;;
esac

# Saving cache
Save_cache cache/packages_binary

# Removing depends
Remove_package

# Creating stage file
Create_stagefile .stage/binary_iso
}
